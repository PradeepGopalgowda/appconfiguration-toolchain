apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: appconfiguration-cd
spec:
  params:
    - name: task-pvc
      description: the output pvc - this is the name of the PVC that is mounted for the execution of the task
    - name: repository
      description: the git repo
    - name: branch
      description: the branch for the git repo
      default: master
    - name: guid
      description: Id of the App Configuration instance
    - name: region
      description: Region of the App Configuration instance
    - name: collection_id
      description: name of the App Configuration collection
    - name: featureFilePath
      description: JSON file path where the App Configuration feature details are stored         
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: cd-secret
  stepTemplate:
    env:
      - name: GIT_TOKEN
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: GIT_TOKEN            
  steps:
    - name: git-clone
      image: icr.io/continuous-delivery/pipeline/tekton/alpine-git:latest
      workingDir: /artifacts
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: BRANCH
          value: $(params.branch)
      command: ["/bin/sh", "-c"]
      args:
        - |
          set -e;          
          #to do - change this
          GIT_URL="https://$GIT_TOKEN@github.com/jojustin/toolchain-sample.git"
          echo "Cloning $GIT_URL"
          repo_exists=$(git ls-remote $GIT_URL 2>&1 | cut -d':' -f2 | head -1 | awk '{print $1,$2,$3}')
          if [ "$repo_exists" == "Repository not found." ]; then
            echo "Repo does not exist"
            exit 1
          else
            echo "Repo exists"
          fi
          echo $BRANCH
          git clone -b $BRANCH $GIT_URL
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(params.task-pvc)
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
        - key: toolchain.json
          path: toolchain.json