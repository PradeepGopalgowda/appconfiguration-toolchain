apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ac-sync-task
spec:
  params:
    - name: task-pvc
      description: the output pvc - this is the name of the PVC that is mounted for the execution of the task
    - name: repository
      description: the git repo
    - name: branch
      description: the branch for the git repo
      default: master
    - name: apikey
      description: the ibmcloud api key
    - name: guid
      description: Id of the App Configuration instance
    - name: region
      description: Region of the App Configuration instance
    - name: resourceGroup
      description: Resource group
    - name: imageUrl
      description: imageUrl
    - name: collection_id
      description: name of the App Configuration collection
    - name: clusterName
      description: The IBM Cloud Kubernetes cluster name      
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: cd-secret
  stepTemplate:
    env:
      - name: GIT_TOKEN
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: GIT_TOKEN            
  steps:
    - name: git-clone
      image: icr.io/continuous-delivery/pipeline/tekton/alpine-git:latest
      workingDir: /artifacts
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: BRANCH
          value: $(params.branch)
        - name: GIT_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(inputs.params.continuous-delivery-context-secret)
              key: GIT_TOKEN                                 
      command: ["/bin/sh", "-c"]
      args:
        - |
          #set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          #git clone -b $BRANCH $REPOSITORY
          # Add the proper creds to the git repository
          #GIT_URL=$(echo "$REPOSITORY" | sed -e "s/:\/\//:\/\/$GIT_AUTH_USER:$GIT_TOKEN@/g")
          #to do - change this 
          GIT_URL=https://$GIT_TOKEN@github.com/toolchain-sample.git
          echo "Cloning $REPOSITORY"
          repo_exists=$(git ls-remote $GIT_URL 2>&1 | cut -d':' -f2 | head -1 | awk '{print $1,$2,$3}')
          echo "$repo_exists"
          if [ "$repo_exists" == "Repository not found." ]; then
            echo "Repo does not exist"
            exit 1
          else
            echo "Repo exists"
          fi
          if [ -z "$BRANCH" ]; then
              git clone -q -b $BRANCH $GIT_URL
          fi

      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
    - name: json-update
      image: ibmcom/pipeline-base-image
      workingDir: /artifacts
      env:
        - name: APIKEY
          value: $(params.apikey)
        - name: GUID
          value: $(params.guid)
        - name: COLLECTIONID
          value: $(params.collection_id)
        - name: BRANCH
          value: $(params.branch)
        - name: REPOSITORY
          value: $(params.repository)          
        - name: REGION
          value: $(params.region)
        - name: GIT_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(inputs.params.continuous-delivery-context-secret)
              key: GIT_TOKEN                                 
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -x -o pipefail;
          echo ${REPOSITORY}
          #echo ${REPOSITORY} | rev | cut -d '/' -f 1 | rev
          folderName=$(echo ${REPOSITORY##*/})
          cd $folderName
          
          git branch 
          git branch acsync $BRANCH        
          git checkout acsync         
          if [ "$REGION" = "eu-gb" ]; then
            baseUrl="https://eu-gb.apprapp.cloud.ibm.com/apprapp/feature/v1/instances/"
          else 
            # baseUrl="https://us-south.apprapp.cloud.ibm.com/apprapp/feature/v1/instances/"
            baseUrl="https://apprapp-dev-37b89de8caeb649450a9af91731f3589-0000.us-south.containers.appdomain.cloud/apprapp/feature/v1/instances/"
          fi
          
          configUrl="${baseUrl}${GUID}/collections/${COLLECTIONID}/config"
          curl -X GET $configUrl -H 'Authorization: $APIKEY' >> feature.json
          echo "Retrieved the Flags. Written to the json" 
          git status
          changes=$(git status --porcelain=v1 2>/dev/null | wc -l)
          echo "------+++++++++++++++++++++++++++++=========="                       
          if [ "$changes" = "0" ]; then
            echo "no changes"
          else 
             echo "changes ---- "
             #git config -l
             #git config --global user.name jojustin
             #git config --global user.email jojustin@in.ibm.com
             #git config --global hub.protocol https
             git config -l
             #git add .
             #echo "after add "             
             #git commit -m "sync with app configuration"
             #echo "after commit " 
             #git push --set-upstream origin acsync
             #echo "after push origin " 
             #git request-pull https://${GIT_TOKEN}@github.com/jojustin/toolchain-sample.git main
          fi
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
    - name: docker-build
      image: ibmcom/pipeline-base-image
      workingDir: /artifacts
      env:
        - name: REGION
          value: $(params.region)
        - name: IMAGEURL
          value: $(params.imageUrl)        
        - name: RESOURCEGROUP
          value: $(params.resourceGroup)
        - name: REPOSITORY
          value: $(params.repository)          
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']             
        - name: API_KEY 
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: API_KEY        
        - name: GIT_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: GIT_TOKEN                                 
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail;
          BUILT_IMAGE="$IMAGEURL:$BUILD_NUMBER"
          echo "built image $BUILT_IMAGE"
          folderName=$(echo ${REPOSITORY##*/})
          cd $folderName
          ls -la
          echo "Beginning of config json display"
          cat ./feature.json
          echo "End of config json display"
          
          ibmcloud config --check-version false
          ibmcloud login -a https://cloud.ibm.com -r $REGION --apikey $API_KEY    
          ibmcloud target -g $RESOURCEGROUP      
          ibmcloud cr build -t $BUILT_IMAGE .
          #BUILT_IMAGE="$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$BUILD_NUMBER"
          echo "image is $BUILT_IMAGE"
          echo "Docker Image has been pushed to us.icr.io"
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
    - name: deploy
      image: ibmcom/pipeline-base-image
      workingDir: /artifacts
      env:
        - name: imageUrl
          value: $(params.imageUrl)
        - name: REGION
          value: $(params.region)             
        - name: clusterName
          value: $(params.clusterName)
        - name: resourceGroup
          value: $(params.resourceGroup)
        - name: REPOSITORY
          value: $(params.repository)          
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']   
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: API_KEY  
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -x -o pipefail
          echo "cluster name from param is $clusterName"
          #folderName=$(echo ${REPOSITORY##*/})
          #cd $folderName
          BUILT_IMAGE="$imageUrl:$BUILD_NUMBER"
          ibmcloud config --check-version false
          ibmcloud login -a https://cloud.ibm.com -r $REGION --apikey $API_KEY
          ibmcloud target -g $resourceGroup
          ibmcloud cr info
          
          ibmcloud ks cluster ls
          ibmcloud ks cluster config --cluster $clusterName
          
          DEPLOYMENT_FILE="kube/deployment.yaml"
          echo "deployment file $DEPLOYMENT_FILE"
          sed -i 's=$IMAGE='"$BUILT_IMAGE"'=g' $DEPLOYMENT_FILE
          
          cat $DEPLOYMENT_FILE
          echo "kubectl apply -f $DEPLOYMENT_FILE"
          kubectl apply -f $DEPLOYMENT_FILE
          kubectl apply -f kube/service.yaml
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(params.task-pvc)
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
        - key: toolchain.json
          path: toolchain.json